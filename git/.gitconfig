[core]
	editor = vim
	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
    excludesfile = ~/.gitignore
    pager = delta

[web]
    browser = firefox

[color]
    ui = true

[color "branch"]
    current = blue reverse
    local = blue
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = red

[pull]
    rebase = true

[push]
    default = simple

[diff]
	tool = delta
    guitool = code

[difftool]
    prompt = false

[interactive]
    diffFilter = delta --color-only

[delta]
    features = side-by-side line-numbers decorations
    syntax-theme = 'OneHalfDark'
    plus-style = 'syntax "#333B2F"'
    minus-style = 'syntax "#382F32"'
    colorMoved = default
    hyperlinks = false

[delta "decorations"]
    commit-decoration-style = bold yellow
    file-style = bold green
    hunk-header-decoration-style = cyan

[delta "line-numbers"]
    line-numbers-left-style = white
    line-numbers-right-style = white
    line-numbers-zero-style = white
    line-numbers-minus-style = red
    line-numbers-plus-style = green

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[alias]
    # Show all of my configured aliases
    aliases = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\ \t => \\2/' | sort

    # Start a new local repository and perform initial commit
    this = !git init && git add . && git commmit -m \"Initial commit.\"

    # Delete a branch
    brdel = branch -D

    # Show branch history for all branches
    brhist = !git for-each-ref --sort=committerdate --format='%(refname:short) *  %(authorname) * %(committerdate:relative)' refs/remotes/ | column -t -s '*'

    # Save a repo as a tarball
    export = archive -o latest.tar.gz -9 --prefix=latest/

    # Which files are receiving the most "love"
    churn = !git log --all -M -C --name-only --format='format:' "$@" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print "count,file"} {print $1 "," $2}'

    # Displays the commit logs using a branch graph representation
    # Format:
    # * <commit-hash> - (HEAD -> master) commit message (2 days ago) <Author Name>
    # |\
    # | * <commit-hash> - commit message (2 days ago) <Author Name>
    # * | <commit-hash> - commit message (3 days ago) <Author Name>
    # |/
    # * <commit-hash> - (origin/master, origin/HEAD) commit message (4 days ago) <Author Name>
    graph = log --graph --pretty=format:'%C(yellow)%h%Creset -%Cred%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

    # Displays the commit logs with dates in YYYY-MM-DD form
    # Format:
    # <commit-hash> YYYY-MM-DD commit message [Author Name]
    ld = log --pretty=format:"%C(yellow)%h\\ %Cgreen%ad%Creset\\ %s\\ %Cblue[%an]" --date=short

    # Displays the commit logs using relative dates and breaking down each commit by the files changed
    # Format:
    # <commit-hash> 2 days ago commit message [Author Name]
    # D     /path/to/file
    # M     /path/to/file
    #
    # <commit-hash> 2 days ago commit message [Author Name]
    # A     /path/to/file
    # M     /path/to/file
    lf = log --pretty=format:"%C(yellow)%h\\ %Cgreen%ad%Creset\\ %s\\ %Cblue[%an]" --date=relative --name-status

    # Displays the commit logs using relative dates
    # Format:
    # <commit-hash> 2 days ago commit message [Author Name]
    lr = log --pretty=format:"%C(yellow)%h\\ %Cgreen%ad%Creset\\ %s\\ %Cblue[%an]" --date=relative

    # Show all authers in repo
    authors = !sh -c 'git log --format="%aN" | sort -k 2 -u'

    # Shows authors by number of commits
    who = shortlog -sn --no-merges

    # Displays user name and user email
    whoami = !git config --get user.name && git config --get user.email

    # SHow git config
    info = config --list

    # Hard reset current branch
    nuke = !sh -c 'git reset --hard HEAD~$1' -

    # Soft reset current branch
    unstage = reset HEAD

    # Display the current origin url for the current branch
    origin = remote show origin

    # Change branches using fuzzy finder
    fbr = !git branch | fzf

    # Fuzzy diff of current changes
    fdiff = !git status -s  | fzf --no-sort --preview 'git diff --color=always {+2} | delta -w ${FZF_PREVIEW_COLUMNS:-$COLUMNS}' --preview-window 'right:nohidden:80%:wrap'
